import dayjs from "dayjs";
import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useCountdown } from "../utils/useCountdown";
import isBetween from "dayjs/plugin/isBetween";
import ReactPlayer from "react-player/youtube";
import { useCallback, useEffect, useState } from "react";
import useSWR from "swr";
import clsx from "clsx";
import EventCard from "../components/Event";

dayjs.extend(isBetween);

export type LaunchEvent = {
  id: number;
  activeBlock: {
    start: { hours: number; minutes: number };
    end: { hours: number; minutes: number };
  };
  description: string;
};

// const SCHEDULED_T0 = "2022-09-06T00:41:00Z";

const Home: NextPage = () => {
  const [SCHEDULED_T0, setT0] = useState(new Date().toISOString())

  const fetcher = (url: string) => fetch(url).then((r) => r.json());
  const { data, error } = useSWR(
    "https://opti21.github.io/artemis-data/public/artemis.json",
    fetcher,
    {
      onSuccess(data, key, config) {
        setT0(data.scheduledT0)
      },
    }
  );

  const activeEvents = useCallback(
    (eventData: LaunchEvent[]) => {
      return eventData.filter((lEvent) => {
        const isActive = dayjs().isBetween(
          dayjs(SCHEDULED_T0)
            .subtract(lEvent.activeBlock.start.hours, "hours")
            .subtract(lEvent.activeBlock.start.minutes, "minutes"),
          dayjs(SCHEDULED_T0)
            .subtract(lEvent.activeBlock.end.hours, "hours")
            .subtract(lEvent.activeBlock.end.minutes, "minutes")
        );

        return isActive;
      });
    },
    [SCHEDULED_T0]
  );

  const upcomingEvents = useCallback(
    (eventData: LaunchEvent[]) => {
      return eventData.filter((lEvent) => {
        const isUpcoming = dayjs().isBefore(
          dayjs(SCHEDULED_T0)
            .subtract(lEvent.activeBlock.start.hours, "hours")
            .subtract(lEvent.activeBlock.start.minutes, "minutes")
        );

        return isUpcoming;
      });
    },
    [SCHEDULED_T0]
  );

  const [days, hours, minutes, seconds] = useCountdown(
    dayjs(SCHEDULED_T0).toISOString()
  );
  console.log(data);

  return (
    <>
      <Head>
        <title>Artemis Countdown</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg-slate-900 bg-cover bg-center bg-artemis overflow-x-hidden max-h-screen">
        <div className="w-screen min-h-screen flex flex-col justify-center items-center p-4 bg-slate-900 z-10 bg-opacity-60">
          <div className="text-6xl text-white font-bold mb-6">Artemis I</div>

          {/* <ReactPlayer
            url="https://www.youtube.com/watch?v=Rv4FXgN8A1g"
          /> */}

          {data ? (
            <>
              <div className="text-white font-bold text-2xl my-2">
                Current Status:
                <span
                  className={clsx(
                    "p-1 text-xl rounded-xl px-2 ml-2",
                    data.status === "GO" && "bg-green-600",
                    data.status === "NO-GO" && "bg-red-600",
                    data.status === "SCRUBBED" && "bg-red-600",
                    data.status === "DELAYED" && "bg-red-600"
                  )}
                >
                  {data.status}
                </span>
              </div>
              {(data.status === "GO" || data.status === "DELAYED") && (
                <>
                  <div className="countdown text-5xl md:text-7xl lg:text-8xl font-source-code font-black flex flex-row">
                    <div className="text-white flex flex-row">
                      <div>L-</div>
                      {days && Number(days) > 0 && (
                        <>
                          <div>{days}</div>
                          <div>:</div>
                        </>
                      )}
                      <div>{hours}</div>
                      <div>:</div>
                      <div>{minutes}</div>
                      <div>:</div>
                      <div>{seconds}</div>
                    </div>
                  </div>

                  <div className="active-events flex flex-col items-center justify-center w-full max-w-xl">
                    <div className="text-white font-bold text-2xl">
                      Current Launch Events
                    </div>
                    {activeEvents(data.launchEvents).map(
                      (lEvent: LaunchEvent) => {
                        return (
                          <div
                            key={lEvent.id}
                            className=" w-full rounded-md bg-orange-900 text-white p-2 text-center my-1"
                          >
                            <div className="font-bold">{lEvent.description}</div>
                            <div>
                              (L-{lEvent.activeBlock.start.hours}H
                              {lEvent.activeBlock.start.minutes}M -{" "}
                              {lEvent.activeBlock.end.hours}H
                              {lEvent.activeBlock.end.minutes}M)
                            </div>
                          </div>
                        );
                      }
                    )}
                  </div>

                  <div className="upcoming-events flex flex-col items-center justify-center max-w-xl">
                    <div className="text-white font-bold text-2xl">
                      Upcoming Events
                    </div>
                    {upcomingEvents(data.launchEvents)
                      .sort((a, b) => a.id - b.id)
                      .map((lEvent) => {
                        return (
                          <EventCard
                            key={lEvent.id}
                            lEvent={lEvent}
                            scheduledT0={SCHEDULED_T0}
                          />
                        );
                      })}
                  </div>
                </>
              )}
            </>
          ) : (
            <div className="text-white">Loading...</div>
          )}
        </div>
      </div>
    </>
  );
};

export default Home;
